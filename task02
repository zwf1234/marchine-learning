第一个
#生成数据
import numpy as np
#生成随机数
np.random.seed(1234)
x = np.random.rand(500,3)
#构建映射关系，模拟真实的数据待预测值,映射关系为y = 4.2 + 5.7*x1 + 10.8*x2，可自行设置值进行尝试
y = x.dot(np.array([4.2,5.7,10.8]))

第二个
import numpy as np
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
%matplotlib inline

# 调用模型
lr = LinearRegression(fit_intercept=True)
# 训练模型
lr.fit(x,y)
print("估计的参数值为：%s" %(lr.coef_))
# 计算R平方
print('R2:%s' %(lr.score(x,y)))
# 任意设定变量，预测目标值
x_test = np.array([2,4,5]).reshape(1,-1)
y_hat = lr.predict(x_test)
print("预测值为: %s" %(y_hat))

第三个
class LR_LS():
    def _init_(self):
        self.w = None
    def fit(self,X,y):
        temp0 = np.dot(X.T,X)
        temp = np.dot(np.linalg.inv(temp0), X.T)
        self.w = np.dot(temp, y)
        print(self.w)
        return self.w
    
    def predict(self,x):
        y_pred = np.dot(x,self.w)
        print(y_pred)
        return y_pred
       
if __name__ == "__main__":
    lr_ls = LR_LS()
    lr_ls.fit(x,y)
    print("估计的参数值：%s" %(lr_ls.w))
    x_test = np.array([2,4,5]).reshape(1,-1)
    print("预测值为: %s" %(lr_ls.predict(x_test)))
    
 第四个
 class LR_GD():
    def _init_(self):
        self.w = none
    def fit(self,X,y,alpha = 0.02, loss = 1e-10):

        [m,d] = np.shape(X)
        self.w = np.zeros((d))
        tol = 1e5
        while  tol > loss:
            temp = X.dot(self.w) - y
            self.w = self.w - 1/m * alpha*(temp.dot(X))
            tol = np.abs(np.sum(temp))
         
    def predict(self,x):
        y_pred = x.dot(self.w)
        return y_pred  
if __name__ == "__main__":
    lr_gd = LR_GD()
    lr_gd.fit(x,y)
    print("估计的参数值为：%s" %(lr_gd.w))
    x_test = np.array([2,4,5]).reshape(1,-1)
    print("预测值为：%s" %(lr_gd.predict(x_test)))
